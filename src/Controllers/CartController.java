package Controllers;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;

import java.net.URL;
import java.util.ArrayList;
import java.util.ResourceBundle;

import Customer.Customer;
import Product.ProductFactory;
import application.Model;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.Label;

import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import javafx.scene.control.TableColumn;

public class CartController implements Initializable {
	@FXML
	private TableView<myDataType> table;
	@FXML
	private TableColumn<myDataType,String> bookNameCol;
	@FXML
	private TableColumn<myDataType,Double> priceCol;
	@FXML
	private Label subtotalLabel;
	@FXML
	private Label taxLabel;
	@FXML
	private Label shippingLabel;
	@FXML
	private Label totalLabel;
	private Customer cs;
	private Model model = new Model();
	public void setScene() {
		bookNameCol.setCellValueFactory(new PropertyValueFactory<>("name"));
		priceCol.setCellValueFactory(new PropertyValueFactory<>("price"));
		ObservableList<myDataType> list = FXCollections.observableArrayList();
		for(ProductFactory pf:cs.getCart().getCart()) {//fill the table
			myDataType my = new myDataType(pf.getName(),pf.getPrice());
			list.add(my);
		}
		table.setItems(list);
		totalLabel.setText(String.valueOf(cs.getCart().CalculateTotal()));
	}
	// Event Listener on Button.onAction
	@FXML
	public void CheckoutButton(ActionEvent event) {//setUserData to return a string which we will no that this call is for payment
		// TODO Autogenerated
		Stage stage = (Stage)table.getScene().getWindow();
		stage.setUserData("Payment");
		stage.close();
	}
	// Event Listener on Button.onAction
	@FXML
	public void removeButton(ActionEvent event) {
		// TODO Autogenerated
		boolean removed = false;
		myDataType m = table.getSelectionModel().getSelectedItem();//get the selected item to drop it from the table
		//but we also need to drop it from the customer cart
		for(ProductFactory pf : cs.getCart().getCart()) {
			if(pf.getName().equals(m.getName())) {//if same name as the name must be unique
				//before removing the product from cart we must add 1 to the quantity of it
				for(ProductFactory p:model.getInventory().getStock()) {
					if(p.getName().equals(pf.getName())) {
						p.setStock(p.getStock()+1);
						cs.getCart().RemoveItem(pf);//remove item from cart
						removed = true;
					}
				}
				if(!removed) {
					//the product isn't found in the stock then add it again
					model.AddProduct(pf);
					cs.getCart().RemoveItem(pf);//remove item from cart
				}
				model.setData();
				break;
			}
		}
		//set User Data to get them in the customer controller and update the model
		Stage stage = (Stage)table.getScene().getWindow();
		stage.setUserData(cs);
		setScene();
		subtotalLabel.setText(" ");
	}
	@FXML
	public void setSubtotal(MouseEvent event) {
		myDataType m = table.getSelectionModel().getSelectedItem();
		subtotalLabel.setText(String.valueOf(m.getPrice()));
	}
	public void setCustomer(Customer c) {
		this.cs=c;
	}
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub

	}
	
}
